name: 'Terraform Infracost apply'

on:
push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
    paths:
      - '09-ec2-webserver-infracost-oidc/**'

jobs:
  terraform_infracost:
    name: 'Terraform Infracost'
    runs-on: ubuntu-latest
    environment: Development
    env:
      working-directory: 09-ec2-webserver-infracost-oidc
      ARGS: "-av"

    # These permissions are needed to interact with GitHub's OIDC Token endpoint.
    permissions:
      id-token: write
      contents: write
      pull-requests: write

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_wrapper: false # This is recommended so the `terraform show` command outputs valid JSON
    
    - name: Configure AWS credentials from Test account
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ secrets.RoleArn }}
        aws-region: us-east-1

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      working-directory: ${{ env.working-directory }}

    # fmt Terraform
    - name: Terraform fmt
      run: terraform fmt -check
      working-directory: ${{ env.working-directory }}

    # Validate Terraform
    - name: Terraform Validate
      run: terraform validate -no-color
      working-directory: ${{ env.working-directory }}

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -out tfplan.binary
      working-directory: ${{ env.working-directory }}

    # Terraform Apply
    - name: Terraform Apply
      run: terraform apply -auto-approve
      working-directory: ${{ env.working-directory }}


